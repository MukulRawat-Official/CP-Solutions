#include <iostream>
#include <bits/stdc++.h>
#define lli long long int
#define ll long long
#define lld long double
#define ull unsigned long long
#define set_bit __builtin_popcountll // check no of 1 set bit (x) 
#define bp_i  __builtin_popcount // used for integer (x)

using namespace std;


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif

void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(unordered_set <T> v);
template <class T , class V> void _print(unordered_map <T, V> v);
template <class T> void _print(multiset <T> v);


template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}


void predefined()
{
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("error.txt", "w", stderr);
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}


/*
  if both ends have same parity then we have no options other than to move in row and count same parity elements
  if partiy at end differ than we need to change a element in between for that we'll see all possibilities
  ->  o e e o o o  e e o o e
  Here we need to change to even element at a time for index one or first occurence of alternate parity ans will be this positon + next even parity elements
  If we wish to choose other even element .. we need to wait till we ecnounter an odd element then because we simply can't choose others as they are not immediate 
  after enocuntering first odd element we can chosse first alternate pairty element + 1(as we encountered 1 odd element) + next even elements..
*/
void solve()
{
  int n;
  cin >> n;
  
  

  vector<lli>arr(n, 0);

  int fp = 0;

  for (int i = 0; i < n; i++)
  {
    cin >> arr[i];

    if (!i)
      fp = (arr[i] & 1);


  }




  debug(fp);
  bool first = true;

  if (fp != (arr[n - 1] & 1))
  {

    int count = INT_MAX;
    int bp = fp;
    int same_parity = 0 , same_sum = 0;


    for (int i = 1; i < n; i++)
    {
      if (fp == (arr[i] & 1))
      { same_parity++; bp = fp;}

      else if (bp != (arr[i] & 1) )
      {

        debug(same_parity);
        debug(same_sum);
        debug(i);
        int x = 1;
        bp = arr[i]  & 1;

        for (int j = i + 1; j < n; j++)
        {
          if (bp == (arr[j] & 1))
            x++;
        }

        int y;

        if (first)
        {
          y = x ;
          first = false;
        }

        else
          y = x + same_sum + 1;
        debug(y);

        count = min(y , count);
        same_sum = same_parity;
      }
    }

    cout << count << endl;
    return;
  }

  int count = 0;

  for (int i = 1; i < n; i++)
  {
    if ((arr[i] & 1) == fp)
      count++;
  }

  cout << count << endl;
}
int main()
{
  predefined();


  lli t;

  cin >> t;

  while (t--)
  {
    solve();
  }

}
