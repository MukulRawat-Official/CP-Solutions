#include <iostream>
#include <bits/stdc++.h>
#define lli long long int
#define ll long long
#define lld long double
#define ull unsigned long long
#define sl long
#define set_bit __builtin_popcountll // check no of 1 set bit (x) 
#define bp_i  __builtin_popcount // used for integer (x)


using namespace std;


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif


void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
void _print(long t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(unordered_set <T> v);
template <class T , class V> void _print(unordered_map <T, V> v);
template <class T> void _print(multiset <T> v);


template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}


void predefined()
{
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("error.txt", "w", stderr);
  freopen("Input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}

/*
  0 - ascending order 3 -descending order
  1. for arr[i] == 0 we can go to 1 and 2 and from arr[i] == 3 we can go to 1 and 2 ... from 1 and 2 we can go to any point
  2. now if arr[i] == 0 then arr[i+1] == 3 (from observation) && vice versa
  3. if we see arr[i] and arr[i+1] == 3 and vice versa then solution not possible 
  
  now iterate through array till we encounter 0 or 3;
  flip 0 to 3 in next turn and keep check if we dont get 0 and 3 in alternate 
  if we reach end of loop tehn solution exist...
*/
void solve()
{
  int n;
  cin >> n;

  vector<int>arr(n);

  for (int i = 0; i < n; i++)
    cin >> arr[i];

  int curr , x;

  int i=0; while(i<n && arr[i] != 0 && arr[i] != 3)i++;
 
  if(i!= n)curr = arr[i];

  for ( ; i < n; i++)
  {
    
    if ((curr == 0 && arr[i] == 3) || (curr == 3 && arr[i] == 0) )
    {
      cout << "no" << endl;
      return;
    }

    else if (curr == arr[i])
      continue;

    else {
      if (curr == 0)
        curr = 3;

      else
        curr = 0;
    }
    
    
  }

  cout << "yes" << endl;

}


int main()
{
  predefined();
  lli t;

  cin >> t;

  while (t--)
    solve();

}
