#include <bits/stdc++.h>
#define endl "\n"
#define lli long long int
#define ll long long
#define lld long double
#define ull unsigned long long
#define set_bit __builtin_popcountll // check no of 1 set bit (x) 
#define bp_i  __builtin_popcount // used for integer (x)
#define mp make_pair
#define edge(x,y) cin>>x>>y;adj[x].push_back(y);adj[y].push_back(x);
#define dedge(x,y) cin>>x>>y;adj[x].push_back(y);
#define pq_dec(i) priority_queue<i,vector<i>, greater<i>>
using namespace std;


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif


void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
void _print(long t) {cerr << t;}


template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(unordered_set <T> v);
template <class T , class V> void _print(unordered_map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(priority_queue <T>v);
template <class T> void _print(priority_queue <T, vector<T>, greater<T>>);


template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(priority_queue <T> c) {cerr << "[ "; priority_queue <T> v = c; while (v.size()) {cerr << v.top() << " "; v.pop();} cerr << "]";}
template <class T> void _print(priority_queue <T, vector<T>, greater<T>> c) {cerr << "[ "; priority_queue <T, vector<T> , greater<T>> v = c; while (v.size()) {cerr << v.top() << " "; v.pop();} cerr << "]";}

void predefined()
{
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("error.txt", "w", stderr);
  freopen("Input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}

/*
   we need to get max unique area for answer
   
   if we start remove elemnet from one side it will add to another side therfore when we remove
   from other side we need to do double work
   
   we need to get max unoque area for least answer
   
   at any point of time we have
  
   l  + [unique] + r
   
   sliding window like problem
   
   ans will be   min (  ans ,   2*min(l,r) + max(l,r) );
   
   i was quite suprised i was not able to identify this as sliding window problem at that time
   i was not able to figure out how to use above knowledge to get answer
  
   /* main point is we need to maximize unique portion... i was not able to figure out this point 
   how to so it as i was thinking about both index simulatneously .... in sliding window 
   we maintain right indext by loop
   naturally if there will be unqiue elements  unique portion will automatically increase by itself 
   we don't need to check right index then*/
   
   why this will work ??
   
   
   consider these cases 
   
   unique ..... unqieue ......
   
   consider frist case
   
   1.> l = 0 , r = end of first unique till n
   2.> l = start to second unique  , r = end of second unique
   
   we can see it cover all cases 
   perform some example youself you'll see
*/

void solve()
{
  int n ;
  cin >> n;
  vector<int>arr(n);

  for (int i = 0; i < n; i++)
    cin >> arr[i];

  int ans = INT_MAX;

  int  r = 0 , l = 0;
  unordered_map<int, int>m;
  for (int i = 0; i < n; i++)
  {
    m[arr[i]]++;
    r = n - 1 - i;




    while (m[arr[i]] > 1)
      m[arr[l++]]--;

    ans = min(ans , 2 * min (r, l) + max(l, r));

  }

  if (ans == INT_MAX)
    ans = 0;

  cout << ans << endl;



}


int main()
{
  predefined();


  lli t;

  cin >> t;


  while (t--)
    solve();
}
