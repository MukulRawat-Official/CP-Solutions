#include <bits/stdc++.h>
#define endl "\n"
#define lli long long int
#define ll long long
#define lld long double
#define ull unsigned long long
#define sl long
#define set_bit __builtin_popcountll // check no of 1 set bit (x) 
#define bp_i  __builtin_popcount // used for integer (x)
#define mp  make_pair

using namespace std;


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif


void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
void _print(long t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(unordered_set <T> v);
template <class T , class V> void _print(unordered_map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(priority_queue <T>v);
template <class T> void _print(priority_queue <T, vector<T>, greater<T>>);


template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

void predefined()
{
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("error.txt", "w", stderr);
  freopen("Input.txt", "r", stdin);
  freopen("Output.txt", "w", stdout);
#endif
}


/*
 first we'll mark all nodes that can't be blocked and block all roads which we can block 
 
 it will give min no of cities that will surely get infect
 
 now if we close upper road all roads beyond it will not get infect (this will made them a sperate group)
 
 now find all possible groups and sort them in dec order
 
 since when we open road with min elements infect cities will not rise raplidly as well as we will reduced no of gates need to be closed
 
 now return min ans possible
*/

void solve()
{

  int n, k;
  cin >> n >> k;

  vector<vector<pair<int, int>>>arr(n + 1);

  int x, y , z;
  for (int i = 0; i < n - 1; i++)
  {
    cin >> x >> y >> z;

    arr[x].push_back({y, z});
    arr[y].push_back({x, z});
  }



  vector<bool>visited(n + 1, false);


  visited[1] = true;

  queue<int>q;
  int nodes = k - 1;

  q.push(1);

  int ans = 0;

  // debug(arr);
  while (q.size())
  {
    int temp = q.front();

    q.pop();

    for (int i = 0; i < (int)arr[temp].size(); i++)
    {
      int k = arr[temp][i].second , v = arr[temp][i].first;
      if ( k == 0 && visited[v] == false)
      {
        nodes--;
        visited[v] = true;
        q.push(v);
      }

      else if ( k == 1)
      {
        ans++;
      }
    }

    // cout << nodes << endl;

    if (nodes  < 0)
      break;
  }

  // debug(visited);

  if (nodes < 0)
  {cout << "-1" << endl; return;}


  vector<int>count;

  for (int i = 2; i <= n; i++)
  {
    if (visited[i] == true)
      continue;

    while (q.size())
      q.pop();

    q.push(i);
    x = 1;

    visited[i] = true;

    while (q.size())
    {
      int temp = q.front();
      q.pop();

      for (int i = 0; i < (int)arr[temp].size(); i++)
      {
        int  v = arr[temp][i].first;

        if (visited[v] == false)
        {
          visited[v] = true;
          q.push(v);
          x++;
        }
      }
    }


    count.push_back(x);
  }



  if (count.size() == 0)
  {cout << ans << endl; return;}

  sort(count.begin(), count.end());

  int idx = 0;

  debug(count);
  debug(visited);
  while (idx < (int)count.size() && nodes > 0)
  {
    if (nodes >= count[idx])
    {
      nodes -= count[idx];
      ans--;
    }
    idx++;
  }

  cout << ans << endl;

}
int main()
{
  predefined();

  long t;

  cin >> t;



  while (t--)
    solve();


}
