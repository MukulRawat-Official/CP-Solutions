#include <bits/stdc++.h>
#define endl "\n"
#define lli long long int
#define ll long long
#define lld long double
#define ull unsigned long long
#define sl long
#define set_bit __builtin_popcountll // check no of 1 set bit (x) 
#define bp_i  __builtin_popcount // used for integer (x)
#define mp  make_pair

using namespace std;


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif


void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
void _print(long t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(unordered_set <T> v);
template <class T , class V> void _print(unordered_map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(priority_queue <T>v);
template <class T> void _print(priority_queue <T, vector<T>, greater<T>>);


template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

void predefined()
{
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("error.txt", "w", stderr);
  freopen("Input.txt", "r", stdin);
  freopen("Output.txt", "w", stdout);
#endif
}

/*
   when we can reverse substrings so we can increase a particular alphabet only ....
   now we arrange vectors for each alphabet where we have diff size of chunks of each alphabet 
   now we'll sort each chunk in dec order for each alphabet
   and add each chunk to get max answer at each possible instant for each alphabet 
   now we'll max answer at max possible k and print that answer..

*/

void solve()
{
  string s;
  int n;
  cin >> n;
  cin.ignore();
  getline(cin, s);




  vector<vector<int>>arr(26, vector<int>());

  int count = 1;

  for (int i = 1; i < n; i++)
  {


    if (s[i] == s[i - 1])
      count++;

    else
    {
      arr[s[i - 1] - 'a'].push_back(count);
      count = 1;
    }
  }

  arr[s[n - 1] - 'a'].push_back(count);



  for (int i = 0; i < 26; i++)
    sort(arr[i].begin(), arr[i].end(), greater<int>());



  vector<vector<int>>dp(26, vector<int>(n + 2, 0));

  for (int i = 0; i < 26; i++)
  {
    int idx = 0;

    while (idx < (int)arr[i].size())
    {
      dp[i][idx + 1] += (dp[i][idx] + arr[i][idx]);
      idx++;
    }

    idx++;

    while (idx <= n + 1)
    {dp[i][idx] = dp[i][idx - 1]; idx++;}
  }

  debug(dp);
  debug(arr);

  for (int i = 1; i <= n + 1; i++)
    for (int j = 0; j < 26; j++)
      dp[0][i] = max(dp[0][i], dp[j][i]);

  for (int i = 1; i <= n + 1; i++)
    cout << dp[0][i] << " ";

  cout << endl;


}


int main()
{
  predefined();

  long t;

  cin >> t;

  while (t--)
    solve();
}
