#include <bits/stdc++.h>
#define endl "\n"
#define lli long long int
#define ll long long
#define lld long double
#define ull unsigned long long
#define set_bit __builtin_popcountll // check no of 1 set bit (x) 
#define bp_i  __builtin_popcount // used for integer (x)
#define mp make_pair
#define edge(x,y) cin>>x>>y;adj[x].push_back(y);adj[y].push_back(x);
#define dedge(x,y) cin>>x>>y;adj[x].push_back(y);
#define pq_dec(i) priority_queue<i,vector<i>, greater<i>>
using namespace std;


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif


void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
void _print(long t) {cerr << t;}


template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(unordered_set <T> v);
template <class T , class V> void _print(unordered_map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(priority_queue <T>v);
template <class T> void _print(priority_queue <T, vector<T>, greater<T>>);


template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(priority_queue <T> c) {cerr << "[ "; priority_queue <T> v = c; while (v.size()) {cerr << v.top() << " "; v.pop();} cerr << "]";}
template <class T> void _print(priority_queue <T, vector<T>, greater<T>> c) {cerr << "[ "; priority_queue <T, vector<T> , greater<T>> v = c; while (v.size()) {cerr << v.top() << " "; v.pop();} cerr << "]";}

void predefined()
{
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("error.txt", "w", stderr);
  freopen("Input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}

ll max(ll a, ll b)
{
  if (a > b)
    return a;
  return b;
}

/*
  
  this question is divided into two case k > n , k<=n
  
  for k<=n 
  
   we know we'll move in stright path since moving on a positon twice will not be profitable 
   as we have already eaten those mushrooms
   
   now we can simply find this out by prefix sum max value we can find in range
   now since mushroom also grows ... we can collect extra musroom from first min we'll have k(k-1)/2 extra mushrooms
   since extra mushrooms keep growing up
   
  for k>n
  
   we need to do above work for k = n 
   + 
   best optimal stratergy is to wait till k > n since we can collect all once 
   therefore extra mushroom that grow  after =  (k-1-n) * n (since all portion grow equally)
   


*/

void solve()
{
  ll n  , k , ans = 0;
  cin >> n >> k;

  vector<ll>arr(n);

  for (int i = 0; i < n; i++)
    cin >> arr[i];


  vector<ll>p(n);

  p[0] = arr[0];

  for (int i = 1; i < n; i++)
    p[i]  = p[i - 1] + arr[i];

  ll sz = k > n ? n : k;
  sz --;


  for (int i = 0; i + sz < n; i++)
  {
    if (i == 0)
      ans = max(ans , p[i + sz]);

    else
      ans = max(ans , p[i + sz] - p[i - 1]);
  }  // case k<=n

  k--;

  if (k > n)
  {
    k -= n;
    ans += (n * k);
    k = n;
  }

  ans += k * (k + 1) / 2; // extra mushroom of k<=n

  cout << ans << endl;



}


int main()
{
  predefined();


  lli t;

  cin >> t;


  while (t--)
    solve();
}
