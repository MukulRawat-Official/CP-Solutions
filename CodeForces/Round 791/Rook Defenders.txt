#include <bits/stdc++.h>
#define endl "\n"
#define lli long long int
#define ll long long
#define lld long double
#define ull unsigned long long
#define sl long
#define set_bit __builtin_popcountll // check no of 1 set bit (x) 
#define bp_i  __builtin_popcount // used for integer (x)
#define mp make_pair
using namespace std;


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif

void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
void _print(long t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(unordered_set <T> v);
template <class T , class V> void _print(unordered_map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(priority_queue <T>v);


template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(priority_queue <T> v) {cerr << "["; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

void predefined()
{
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("error.txt", "w", stderr);
  freopen("Input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}

/*

a attacking rook will cover horizonatal (x) and vetical(y) axis;

we'll maintain a an array of x and y axis and count possible no of rooks attacking in that axis

now for a given range we can simply check range from 

x1<=x<=x2 && y1<=y<=y2 if spot is safe

int order to reduce time complexity we'll use two set as well 

which will take non attackable spots in x and y axis 

now if we're given a range we can simply find lower bound of x1 and y1 if they are greater than x1 and y1 respectively or reach to end
it means that protion can be attacked so attack will be possible 

not print your answer accordingly

*/

void solve()
{
  int n , q ;

  cin >> n >> q;

  vector<int>x(n + 1, 0), y(n + 1, 0);
  set<int> nx, ny;

  for (int i = 1; i <= n; i++)
  {
    nx.insert(i);
    ny.insert(i);
  }

  int x1, y1, x2, y2, a;
  while (q--)
  {
    cin >> a >> x1 >> y1;

    if (a == 1)
    {

      x[x1]++;
      y[y1]++;

      if (x[x1] == 1)
        nx.erase(*(nx.find(x1)));

      if (y[y1] == 1)
        ny.erase(*(ny.find(y1)));
    }

    else if (a == 2)
    {
      x[x1]--;
      y[y1]--;

      if (x[x1] == 0)
        nx.insert(x1);


      if (y[y1] == 0)
        ny.insert(y1);

    }

    else
    {
      cin >> x2 >> y2;

      auto it1 = nx.lower_bound(x1) , it2 = ny.lower_bound(y1);


      if (it1 == nx.end() || *it1 > x2)
        cout << "Yes" << endl;



      else if (it2 == ny.end() || *it2 > y2)
        cout << "Yes" << endl;

      else
        cout << "No" << endl;
    }
  }

}

int main()
{
  predefined();


  // lli t;

  // cin >> t;



  // while (t--)
  solve();

}
