#include <bits/stdc++.h>
#define endl "\n"
#define lli long long int
#define ll long long
#define lld long double
#define ull unsigned long long
#define set_bit __builtin_popcountll // check no of 1 set bit (x) 
#define bp_i  __builtin_popcount // used for integer (x)
#define mp make_pair
#define pq(i) priority_queue<i>
#define pq_dec(i) priority_queue<i,vector<i>, greater<i>>
using namespace std;


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif


void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
void _print(long t) {cerr << t;}


template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(unordered_set <T> v);
template <class T , class V> void _print(unordered_map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(priority_queue <T>v);
template <class T> void _print(priority_queue <T, vector<T>, greater<T>>);


template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(priority_queue <T> c) {cerr << "[ "; priority_queue <T> v = c; while (v.size()) {cerr << v.top() << " "; v.pop();} cerr << "]";}
template <class T> void _print(priority_queue <T, vector<T>, greater<T>> c) {cerr << "[ "; priority_queue <T, vector<T> , greater<T>> v = c; while (v.size()) {cerr << v.top() << " "; v.pop();} cerr << "]";}

void predefined()
{
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("error.txt", "w", stderr);
  freopen("Input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}

/*
  bubble sort can be easier
  
  i applied selection sort 
  
  while sorting array i stored all possible index for a position in a and b if i found any same position ill sort else return -1;
  
  for bublle sort -> sort according to first array then according to second if we found array are not sorted till end we have a problem then

*/

void solve()
{
  int n;

  cin >> n;

  vector<int>a(n), b(n) , c ;

  for (int i = 0; i < n; i++)
    cin >> a[i];

  for (int i = 0; i < n; i++)
    cin >> b[i];


  set<int>x, y;
  int swaps = 0;

  for (int i = 0; i < n; i++)
  {
    int d = a[i] , e = b[i];

    x.insert(i);
    y.insert(i);

    for (int j = i + 1; j < n; j++)
    {
      if (a[j] == d)
        x.insert(j);

      if (b[j] == e)
        y.insert(j);

      if (a[j] < d)
      {
        x.clear();
        x.insert(j);
        d = a[j];
      }


      if (b[j] < e)
      {
        y.clear();
        y.insert(j);
        e = b[j];
      }
    }

    int idx = -1;

    for (auto it = x.begin() ; it != x.end(); it++)
    {
      if (y.find(*it) != y.end())
      {
        idx = *it;
        break;
      }
    }

    if (idx == -1)
    {
      cout << -1 << endl;
      return;
    }

    else
    {

      if (idx != i)
      {
        swaps++;
        c.push_back(idx + 1);
        c.push_back(i + 1);

        swap(a[idx], a[i]);
        swap(b[idx], b[i]);
      }
    }

    x.clear();
    y.clear();

  }

  cout << swaps << endl;
  int idx = 0;
  while (swaps--)
    cout << c[idx++] << " " << c[idx++] << endl;




}

int main()
{
  predefined();


  lli t;

  cin >> t;
  // debug(t);

  while (t--)
    solve();
}
