#include <bits/stdc++.h>
#define endl "\n"
#define lli long long int
#define ll long long
#define lld long double
#define ull unsigned long long
#define set_bit __builtin_popcountll // check no of 1 set bit (x) 
#define bp_i  __builtin_popcount // used for integer (x)
#define mp make_pair
#define edge(x,y) cin>>x>>y;adj[x].push_back(y);adj[y].push_back(x);
#define dedge(x,y) cin>>x>>y;adj[x].push_back(y);
#define pq_dec(i) priority_queue<i,vector<i>, greater<i>>
using namespace std;


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif


void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
void _print(long t) {cerr << t;}


template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(unordered_set <T> v);
template <class T , class V> void _print(unordered_map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(priority_queue <T>v);
template <class T> void _print(priority_queue <T, vector<T>, greater<T>>);


template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(priority_queue <T> c) {cerr << "[ "; priority_queue <T> v = c; while (v.size()) {cerr << v.top() << " "; v.pop();} cerr << "]";}
template <class T> void _print(priority_queue <T, vector<T>, greater<T>> c) {cerr << "[ "; priority_queue <T, vector<T> , greater<T>> v = c; while (v.size()) {cerr << v.top() << " "; v.pop();} cerr << "]";}

void predefined()
{
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("error.txt", "w", stderr);
  freopen("Input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}

/*
 
  first dicuss two points given
  
  1.> if a[i] % m == 0 , we'll divide a[i] into m parts such that each part = a[i]/m
  2.> al , ar such that al == al+1 == ... a[r]  -> (al,ar) == m size 
      replace all this with  (a[l] * m)
      
  if we closely observe we can see that these two are inverse of each other.
  as we divide it into m parts we can collab m parts as well
  
  so how do we use it now ? 
  
  we can divide 
  
  each element in smallest part possible
  and add in array if they are continous because we can form array from it as
  elements must be equal
  
  so we add in one part and then start count for other part..
  
  we divide both array by this if they are equal then we can form given array then it's not possible

*/


void solve()
{
  int n , k , m , t;
  cin>>n>>k;
  
  vector<pair<lli,lli>>a;

  for(int i =0;i<n;i++)
  {
      lli c = 1;
      cin>>t;

      while(t % k == 0)
      {
        t/=k;
        c*=k; // remember factors get multiplied as eg m =2 , (n = 2 ->  t = 1 , c = 2 ) , ( n = 4 -> t = 1 , c = 4 ) c == no of basic elements
      }
      
      if(!a.size() || a.back().first != t)
        a.push_back({t,c});

      else
        a.back().second += c;
  }
  cin>>m; vector<pair<lli,lli>>b;
   
  for(int i =0;i<m;i++)
  {
      lli c = 1;
      cin>>t;

      while(t % k == 0)
      {
        t/=k;
        c*=k;
      }
      
      if(!b.size() || b.back().first != t)
        b.push_back({t,c});

      else
        b.back().second += c;
    
  }
  
  debug(a);
  debug(b);
  
  
  if(a != b)
    cout<<"No"<<endl;

  else
    cout<<"Yes"<<endl;
}






int main()
{
  predefined();
  

  lli t;

  cin >> t;


  while (t--)
  solve();
}
