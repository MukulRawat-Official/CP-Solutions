#include <bits/stdc++.h>
#define endl "\n"
#define lli long long int
#define ll long long
#define lld long double
#define ull unsigned long long
#define sl long
#define set_bit __builtin_popcountll // check no of 1 set bit (x) 
#define bp_i  __builtin_popcount // used for integer (x)
#define mp  make_pair
#define pb push_back
#define popb pop_back
#define eb emplace_back

using namespace std;


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif


void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
void _print(long t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(unordered_set <T> v);
template <class T , class V> void _print(unordered_map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(priority_queue <T>v);
template <class T> void _print(priority_queue <T, vector<T>, greater<T>>);


template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

void predefined()
{
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("error.txt", "w", stderr);
  freopen("Input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}

/*

 we need to create such an array that will have lis as well as lds(longest decreasing subsequence) at same time beacuse 
 when we reverse the list lds will become lis ...
 
 one element can at max two time contritbute in list one in lis and one in lds
 therfore max frequency we'll take of element is 2 in list count 
 
 one more thing if array is odd (unique element count) one largest element can be used as increasing as well as decreasing so 
 we it will increase list length by 1 ..

*/
void solve()
{
  int n;
  cin >> n;

  vector<int>arr(n);

  for (int i = 0; i < n; i++)
    cin >> arr[i];

  if (n == 2 && arr[0] == arr[1])
  {
    cout << 1 << endl;
    return;
  }

  sort(arr.begin(), arr.end());

  int count = 1 ;
  int fact = 0;
  for (int i = 1; i < n; i++)
  {
    if (arr[i] == arr[i - 1] && fact == 0)
    {
      fact = 1;
      count++;
    }

    if (arr[i] != arr[i - 1])
    {
      fact = 0;
      count++;
    }
  }

  cout << (count + 1) / 2 << endl;
}



int main()
{
  predefined();

  long t;

  cin >> t;

  while (t--)
    solve();
}
