#include <bits/stdc++.h>
#define endl "\n"
#define lli long long int
#define ll long long
#define lld long double
#define ull unsigned long long
#define set_bit __builtin_popcountll // check no of 1 set bit (x) 
#define bp_i  __builtin_popcount // used for integer (x)
#define mp make_pair
#define edge(x,y) cin>>x>>y;adj[x].push_back(y);adj[y].push_back(x);
#define dedge(x,y) cin>>x>>y;adj[x].push_back(y);
#define pq_dec(i) priority_queue<i,vector<i>, greater<i>>
using namespace std;


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif


void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
void _print(long t) {cerr << t;}


template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(unordered_set <T> v);
template <class T , class V> void _print(unordered_map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(priority_queue <T>v);
template <class T> void _print(priority_queue <T, vector<T>, greater<T>>);


template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(priority_queue <T> c) {cerr << "[ "; priority_queue <T> v = c; while (v.size()) {cerr << v.top() << " "; v.pop();} cerr << "]";}
template <class T> void _print(priority_queue <T, vector<T>, greater<T>> c) {cerr << "[ "; priority_queue <T, vector<T> , greater<T>> v = c; while (v.size()) {cerr << v.top() << " "; v.pop();} cerr << "]";}

void predefined()
{
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("error.txt", "w", stderr);
  freopen("Input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}
/*
  no of vertices = 3 mean it has one connection with parent node and two children (pagal bana rahe h hme its binary tree only)
  its undireected so we'll form undirected trew as well

  dfs based question whenever well get to part where we need to made two choices either go left or right 
  we'll calc both path  and how to calc nodes at each point 
  before running dfs we'll maintain path sum which will hold no of nodes below it
  
  now if we take left tree (i mean cut left tree)
  we'll choose dfs for right and vice versa
  and return max of both

*/
vector<int>path_sum;

int calc(vector<vector<int>>&adj  , int idx , int p )
{


  path_sum[idx] = 1;

  for (auto&x : adj[idx])
    if (x != p)
      path_sum[idx] +=  calc(adj, x , idx);

  return path_sum[idx];
}

ll dfs(vector<vector<int>>& adj  , int idx , int p)
{


  ll sum = 0;

  int n = adj[idx].size();

  if (idx == 1)
    n++;

  if (n == 2)
  {
    int x ;

    for (auto& x : adj[idx])
      if (x != p)
        sum += path_sum[x] - 1;
  }
  else if (n == 3)
  {
    int l = -1 , r = -1;

    for (auto& x : adj[idx])
    {
      if (x == p)
        continue;

      else if (l == -1)
        l = x;

      else
        r = x;
    }
    sum = max(path_sum[l] + dfs(adj, r ,  idx) , path_sum[r] + dfs(adj, l ,  idx)) - 1 ;
  }

  return sum;
}


void solve()
{
  int n , u , v;
  cin >> n;

  vector<vector<int>>adj(n + 1);
  path_sum.resize(n + 1 , 0);

  for (int i = 0; i < n - 1; i++)
  {edge(u, v);}

  calc(adj, 1 , -1);

  debug(path_sum);
  debug(adj);

  cout << dfs(adj, 1 ,  -1) << endl;
}







int main()
{
  predefined();
  // sol();

  lli t;

  cin >> t;


  while (t--)
    solve();
}
