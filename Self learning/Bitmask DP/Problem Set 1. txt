Q1.> Given n shops and m days in each day we can purchase good from any one of the shop
     You need to find minimum to cost buy 1 product from each shop.
     
-> eg:- 3 8 (n,m)
       6 9 5 2 8 9 1 6
       8 2 6 2 7 5 7 2
       5 3 9 7 3 5 1 4
     ans-> 5   


ll recurr(ll set, ll idx , vector<vector<ll>>&arr, vector<vector<ll>>&dp)
{
  if (idx == arr[0].size())
  {
    if (set) return INT_MAX;
    return 0;
  }

  if (dp[set][idx] != -1) return dp[set][idx];
  dp[set][idx] = recurr(set, idx + 1, arr, dp);
  for (int i = 0; i < arr.size(); i++)
  {
    if (set & (1 << i))
    {
      ll tmp = arr[i][idx] + recurr(set ^ (1 << i) , idx + 1, arr, dp);
      dp[set][idx] = min(dp[set][idx], tmp);
    }
  }

  return dp[set][idx];
}


void solve()
{
  ll n, m; cin >> n >> m;
  vector<vector<ll>>arr(n, vector<ll>(m));
  vector<vector<ll>>dp( (1 << n) , vector<ll>(m, -1));
  for (int i = 0 ; i < n; i++)
    for (int j = 0; j < m; j++)cin >> arr[i][j];
  ll set = (1 << n) - 1;
   /*
    d = current day , s = set representing bits
    Transition -> (S,d) -> min( (S,d+1) , (S/x,d+1) + price[x][d])
    S/x -> x bit removed
    */

  cout << recurr(set, 0, arr, dp) << endl;
}
